// <auto-generated />
using System;
using DeliveryOrders.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DeliveryOrders.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DeliveryOrders.DataAccess.Models.AddressModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("AddressModels");
                });

            modelBuilder.Entity("DeliveryOrders.DataAccess.Models.CityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CityModels");
                });

            modelBuilder.Entity("DeliveryOrders.DataAccess.Models.OrderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CargoPickupDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("CargoWeight")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<Guid>("RecipientAddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderAddressId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecipientAddressId");

                    b.HasIndex("SenderAddressId");

                    b.ToTable("OrderModels");
                });

            modelBuilder.Entity("DeliveryOrders.DataAccess.Models.AddressModel", b =>
                {
                    b.HasOne("DeliveryOrders.DataAccess.Models.CityModel", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DeliveryOrders.DataAccess.Models.OrderModel", b =>
                {
                    b.HasOne("DeliveryOrders.DataAccess.Models.AddressModel", "RecipientAddress")
                        .WithMany("RecipentOrders")
                        .HasForeignKey("RecipientAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryOrders.DataAccess.Models.AddressModel", "SenderAddress")
                        .WithMany("SenderOrders")
                        .HasForeignKey("SenderAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipientAddress");

                    b.Navigation("SenderAddress");
                });

            modelBuilder.Entity("DeliveryOrders.DataAccess.Models.AddressModel", b =>
                {
                    b.Navigation("RecipentOrders");

                    b.Navigation("SenderOrders");
                });

            modelBuilder.Entity("DeliveryOrders.DataAccess.Models.CityModel", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
